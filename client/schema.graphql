"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type AddTaskPayload {
  addedTaskEdge: TaskEdge
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

type DeleteTaskPayload {
  deletedTaskId: ID
}

type Mutation {
  addTask(title: String!, body: String, priority: TaskPriority!): AddTaskPayload
  updateTask(id: ID!, title: String, body: String, priority: TaskPriority, assignee: ID): UpdateTaskPayload
  deleteTask(id: ID!): DeleteTaskPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  loggedInUser: User!
  statistics: Statistics!
}

type Statistics {
  totalRevenue: ValueWithTrend!
  totalUsers: ValueWithTrend!
  newUsers: ValueWithTrend!
  serverUptime: ValueWithTrend!
  todoList: ValueWithTrend!
  issues: ValueWithTrend!
}

type Task implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  priority: TaskPriority!
  body: String
  assignee: User
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge"""
  node: Task

  """A cursor for use in pagination"""
  cursor: String!
}

enum TaskPriority {
  High
  Medium
  Low
  Unprioritized
}

enum TrendDirection {
  Up
  Neutral
  Down
}

type UpdateTaskPayload {
  updatedTask: Task
}

scalar URL

type User implements Node {
  id: ID!
  avatarUrl: URL!
  name: String!
  description: String
  lastSeenAt: DateTime!
  isLoggedInUser: Boolean!
  friends(after: String, first: Int, before: String, last: Int): UserConnection!
  tasks(after: String, first: Int, before: String, last: Int, priority: TaskPriority): TaskConnection!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

type ValueWithTrend {
  value: Float!
  trend: TrendDirection!
}

